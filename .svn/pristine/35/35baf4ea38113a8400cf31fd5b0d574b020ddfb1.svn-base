<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4"
		 xmlns="http://java.sun.com/xml/ns/j2ee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<!-- 设置不拦截的资源,但需要再Spring中开启默认控制器 -->
	<!-- <servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/img/*</url-pattern>
		<url-pattern>*.js</url-pattern>
		<url-pattern>*.jsp</url-pattern>
		<url-pattern>*.css</url-pattern>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping> -->

	<!--
	  - Spring默认配置文件的路径 ========================================================
	  - 服务器启动后,Spring会自动去寻找该配置文件
	  - 目的是开启SpringMVC功能和配置自动扫包等
	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>

	<!--
	  - Spring MVC 核心控制器 ========================================================
	  - 所有请求(需要Spring处理的动态资源请求)都将通过该控制器进行转发
	  -->
	<servlet>
		<!--<description>Cocoon blocks dispatcher</description>-->
		<!--<display-name>DispatcherServlet</display-name>-->
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--指定该MVC使用哪个配置文件-->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:applicationContext.xml</param-value>
		</init-param>
		<!--配置Servlet实例化时机(当前为启动时马上实例化)-->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!--配置该控制所处理哪些请求-->
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!--
	  - Spring IOC初始化监听器
	  - 监听app..创建时,就自动创建SpringIOC容器
	  -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!--主要负责处理由　JavaBeans Introspector的使用而引起的缓冲泄露  -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- end Spring IOC初始化监听器 -->

	<!--
	  - Spring自动转码过滤器
	  -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- end Spring自动转码过滤器 -->

	<!--自定义过滤器:测试阶段增加跨域访问-->
	<filter>
		<filter-name>EncodingFilter</filter-name>
		<filter-class>cn.laeni.project1.fiter.EncodingFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>EncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--end 自定义过滤器-->

	<!-- shiro框架的过滤器 -->
	<!-- <filter>
		  <filter-name>shiroFilter</filter-name>
		  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		  <init-param>
			  <param-name>targetFilterLifecycle</param-name>
			  <param-value>true</param-value>
		  </init-param>
	  </filter>
	  <filter-mapping>
		  <filter-name>shiroFilter</filter-name>
		  <url-pattern>/*</url-pattern>
	  </filter-mapping> -->
	<!-- end shiro框架的过滤器 -->

	<welcome-file-list>
		<welcome-file>indexPage.do</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	<!--<session-config>
		<session-timeout>15</session-timeout>
	</session-config>-->
</web-app>
